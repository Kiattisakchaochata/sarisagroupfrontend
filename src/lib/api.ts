// src/lib/api.ts

// üîß ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BASE ‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á NEXT_PUBLIC_API_BASE ‡πÅ‡∏•‡∏∞ NEXT_PUBLIC_API_URL
function computeBase() {
  const raw =
    process.env.NEXT_PUBLIC_API_BASE ??
    process.env.NEXT_PUBLIC_API_URL ??
    'http://localhost:8877';

  let base = raw.replace(/\/$/, '');
  if (!/\/api$/.test(base)) base += '/api';
  return base;
}

const API_BASE = computeBase();

function getToken(): string | null {
  if (typeof window === 'undefined') return null;
  return localStorage.getItem('sg_token');
}

function getErrorMessage(data: unknown, fallback: string): string {
  if (typeof data === 'string' && data.trim()) return data;

  if (data && typeof data === 'object' && 'message' in data) {
    const m = (data as { message?: unknown }).message;
    if (typeof m === 'string' && m.trim()) return m;
  }
  if (data && typeof data === 'object' && 'error' in data) {
    const m = (data as { error?: unknown }).error;
    if (typeof m === 'string' && m.trim()) return m;
  }
  return fallback;
}

// üßº ‡∏•‡∏≠‡∏Å HTML ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏∏‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
function stripHtml(input: string): string {
  return input.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
}

// üß† map error ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ö‡πà‡∏≠‡∏¢ ‚Üí ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
function normalizeErrorText(raw: string): string {
  const s = stripHtml(raw);

  // Prisma unique slug
  if (
    /unique constraint failed/i.test(s) &&
    /(stores_slug_key|slug)/i.test(s)
  ) {
    return 'Slug ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô';
  }

  return s;
}

export async function apiFetch<T>(
  path: string,
  opts: RequestInit = {}
): Promise<T> {
  const headers = new Headers(opts.headers || {});

  // ‡πÅ‡∏ô‡∏ö Bearer token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const token = getToken();
  if (token && !headers.has('Authorization')) {
    headers.set('Authorization', `Bearer ${token}`);
  }

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô body obj ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà FormData ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
  let body = opts.body as any;
  const isFormData =
    typeof FormData !== 'undefined' && body instanceof FormData;

  if (body && !isFormData && typeof body === 'object' && !headers.has('Content-Type')) {
    headers.set('Content-Type', 'application/json');
    body = JSON.stringify(body);
  }

  // join path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å (‡∏Å‡∏±‡∏ô // ‡∏ã‡πâ‡∏≠‡∏ô)
  const url = `${API_BASE}/${String(path).replace(/^\/+/, '')}`;

  const res = await fetch(url, {
    ...opts,
    body,
    headers,
    credentials: 'include',
  });

  // OK (2xx)
  if (res.ok) {
    const text = await res.text();
    if (!text) return {} as T;

    try {
      return JSON.parse(text) as T;
    } catch {
      return text as unknown as T;
    }
  }

  // Error ‚Üí ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° extract ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á JSON/HTML
  let msg = `API ${res.status}`;
  let raw = '';

  try {
    raw = await res.text();
    if (raw) {
      try {
        const j = JSON.parse(raw);
        msg = getErrorMessage(j, msg);
      } catch {
        msg = normalizeErrorText(raw) || msg;
      }
    }
  } catch {
    // ignore
  }

  const err: any = new Error(msg);
  err.status = res.status;
  err.body = raw;
  throw err;
}